# Build numbering format
name: $(BuildID)

trigger:
  - feat/*
  - master
  - release

pool:
  vmImage: 'ubuntu-latest'

# Schedule
# ---------

schedules:
  - cron: "0 12 * * 0"
    displayName: Weekly Sunday build
    always: true
    branches:
      include:
      - master


# Shared Templates
# ----------------

resources:
  repositories:
    - repository: templates
      type: github
      name: julie-ng/azure-pipelines-templates
      ref: refs/tags/v1.3.0
      endpoint: julie-ng # required, even if public repo ðŸ™„

# Variables
# ---------

variables:
  - group: azure-demos-config # set in DevOps Library

  - name: registry-namespace
    value: demos

  - name: app-name
    value: azure-nodejs-demo

  - name: app-services-name
    value: azure-nodejs-demo

  - name: image-name
    value: $(registry-namespace)/$(app-name)

  - name: image-name-with-registry
    value: $(registry-host)/$(image-name) # e.g. registry.azurecr.io/demos/app-name

  - name: image-tag
    value: 'dev' # default

  - name: storage-container
    value: 'nodejs-dev' # default

  - name: storage-container-prod
    value: 'nodejs'

  - name: storage-account-name
    value: 'demoassetpipeline'

  - name: is-dev
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/master') }}

  - name: is-release
    value: ${{ and(eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['Build.Reason'], 'Schedule')) }}

  - name: is-deployment
    value: ${{ or(variables['is-dev'], variables['is-release']) }}

  - name: is-debug
    value: true

# Stages
# ------

stages:

# --- Stage: Tests ---

- stage: Tests
  displayName: 'Test (Node.js)'
  condition: false
  jobs:
    - job: Audit
      displayName: Audit Dependencies
      steps:
      - script: npm audit --audit-level=moderate
        displayName: Audit (Dev)
        continueOnError: true
      - script: npm audit --production --audit-level=high
        displayName: Audit (Prod)

    - job: Linter
      displayName: Lint Code
      steps:
      - script: npm ci && npm run lint
        displayName: Lint Code

    - job: UnitTests
      displayName: Unit Tests
      steps:
      - script: npm ci && npm run test
        displayName: Run Tests

    - job: BuildDocker
      displayName: Build Docker Image
      steps:
      - script: docker build .
        displayName: 'Can Docker Build?'


# --- Stage: Build and Push Docker image ---

- stage: BuildAndDeploy
  displayName: 'Build and Deploy'
  condition: true
  jobs:
  - job: build_and_deploy
    steps:
      # -- part 1: set Variables depending if dev or prod
      - script: |
          echo '[default] image tag: $(image-tag)'
          echo '[default] storage account: $(storage-container)'
        displayName: 'Debug: default variables'

      # blob storage container name
      - script: |
          echo "##vso[task.setvariable variable=storage-container]${{ variables['storage-container-prod'] }}"
        displayName: 'Use prod container'
        condition: ${{ variables['is-debug'] }}

      # docker image tag
      - script: |
          echo "##vso[task.setvariable variable=image-tag]$(npm run --silent my-version)"
        displayName: 'Use prod image tag'
        condition: ${{ variables['is-debug'] }}

      - script: |
          echo '[run-time] image tag: $(image-tag)'
          echo '[run-time] storage account: $(storage-container)'
        displayName: 'Debug: pipeline run-time variables'

      # -- part 2: build --

      - script: |
          npm install
          npm run compile-sass
        displayName: 'Compile Sass to CSS'



#       - template: steps/docker-build-push.yml@templates
#         parameters:
#           registryConnectionName: $(registry-service-connection)
#           imageName: $(image-name)
#           tagsAsMultilineString: |
#             $(image-tag)


#       - task: AzureCLI@2
#         displayName: az storage blob upload-batch
#         inputs:
#           azureSubscription: $(lib-var-arm-connection)
#           scriptType: bash
#           scriptLocation: inlineScript
#           inlineScript: |
#             az --version
#             az storage blob upload-batch \
#               --account-name $(storage-account-name) \
#               --source ./assets \
#               --destination $(storage-container-dev)











#       steps:
#       - template: steps/set-custom-variable.yml@templates
#         parameters:
#           condition: ${{ variables['is-release'] }}
#           variableName: image-tag
#           command: 'npm run --silent my-version'

#       - template: steps/docker-build-push.yml@templates
#         parameters:
#           registryConnectionName: $(registry-service-connection)
#           imageName: $(image-name)
#           tagsAsMultilineString: |
#             $(image-tag)

#       - template: steps/lock-acr-image.yml@templates
#         parameters:
#           condition: ${{ variables['is-release'] }}
#           azureArmConnection: $(lib-var-az-acr-connection)
#           acrRegistryName: $(registry-acr-name)
#           imageName: $(image-name)
#           imageTag: $(image-tag)

# # --- Stage: Asset Pipeline ---

# # - stage: AssetPipeline
# #   displayName: 'Asset pipeline'
#   jobs:
#     - job: build_and_publish
#       steps:
#         - script: |
#             npm install
#             npm run compile-sass
#           displayName: 'Compile Sass to CSS'

#         - task: AzureCLI@2
#           displayName: az storage blob upload-batch
#           inputs:
#             azureSubscription: $(lib-var-arm-connection)
#             scriptType: bash
#             scriptLocation: inlineScript
#             inlineScript: |
#               az --version
#               az storage blob upload-batch \
#                 --account-name $(storage-account-name) \
#                 --source ./assets \
#                 --destination $(storage-container-dev)

# # --- Stage: deploy to Azure App Services ---

# # - stage: DeployImage
# #   displayName: Deploy
# #   jobs:

# #   - job: deploy_master
# #     displayName: 'Deploy (master)'
# #     condition: ${{ variables['is-dev'] }}
# #     steps:
# #       - template: steps/deploy-app-service.yml@templates
# #         parameters:
# #           ARMConnectionName: $(lib-var-arm-connection)
# #           dockerImage: $(image-name-with-registry):$(image-tag)
# #           appName: $(app-services-name)-dev # with `-dev` suffix

# #   - job: deploy_release
# #     displayName: 'Deploy (release)'
# #     condition: ${{ variables['is-release'] }}
# #     steps:
# #       - template: steps/set-custom-variable.yml@templates
# #         parameters:
# #           variableName: image-tag
# #           command: 'npm run --silent my-version'

# #       - template: steps/deploy-app-service.yml@templates
# #         parameters:
# #           ARMConnectionName: $(lib-var-arm-connection)
# #           dockerImage: $(image-name-with-registry):$(image-tag)
# #           appName: $(app-services-name)
