# Build numbering format
name: $(BuildID)

trigger:
  - feat/*
  - master
  - release

pool:
  vmImage: 'ubuntu-latest'

# Schedule
# ---------

schedules:
  - cron: "0 12 * * 0"
    displayName: Weekly Sunday build
    always: true
    branches:
      include:
      - master


# Shared Templates
# ----------------

resources:
  repositories:
    - repository: templates
      type: github
      name: julie-ng/azure-pipelines-templates
      ref: refs/tags/v1.3.0
      endpoint: julie-ng # required, even if public repo ðŸ™„

# Variables
# ---------

variables:
  - group: azure-demos-config # set in DevOps Library

  - name: registry-namespace
    value: demos

  - name: app-name
    value: azure-nodejs-demo

  - name: web-app-name
    value: azure-nodejs-demo-dev

  - name: web-app-name-prod
    value: azure-nodejs-demo

  - name: image-name
    value: $(registry-namespace)/$(app-name)

  - name: image-name-with-registry
    value: $(registry-host)/$(image-name) # e.g. registry.azurecr.io/demos/app-name

  - name: image-tag
    value: 'dev' # default

  - name: storage-container
    value: 'nodejs-dev' # default

  - name: storage-container-prod
    value: 'nodejs'

  - name: storage-account-name
    value: 'demoassetpipeline'

  - name: is-dev
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/master') }}

  - name: is-release
    value: ${{ and(eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['Build.Reason'], 'Schedule')) }}

  - name: is-deployment
    value: ${{ or(variables['is-dev'], variables['is-release']) }}

  - name: is-debug
    value: true

# Stages
# ------

stages:

# --- Stage: Tests ---

- stage: Tests
  displayName: 'CI'
  condition: false
  jobs:
    - job: Audit
      displayName: Audit Dependencies
      steps:
      - script: npm audit --audit-level=moderate
        displayName: Audit (Dev)
        continueOnError: true
      - script: npm audit --production --audit-level=high
        displayName: Audit (Prod)

    - job: Linter
      displayName: Lint Code
      steps:
      - script: npm ci && npm run lint
        displayName: Lint Code

    - job: UnitTests
      displayName: Unit Tests
      steps:
      - script: npm ci && npm run test
        displayName: Run Tests

    - job: BuildDocker
      displayName: Build Docker Image
      steps:
      - script: docker build .
        displayName: 'Can Docker Build?'


# --- Stage: Build and Push Docker image ---

- stage: BuildAndDeploy
  displayName: 'Build and Deploy'
  condition: ${{ variables['is-debug'] }}
  jobs:
  - job: build_and_deploy
    steps:

      # 0) OUTPUT DEFAULT VALUES
      - script: |
          echo '[default] image tag: $(image-tag)'
          echo '[default] storage account: $(storage-container)'
          echo '[default] web app name: $(web-app-name)'
        displayName: 'Debug: default values'

      # 1) SET PROD VALUES?
      - script: |
          echo "##vso[task.setvariable variable=storage-container]${{ variables['storage-container-prod'] }}"
          echo "##vso[task.setvariable variable=image-tag]$(npm run --silent my-version)"
          echo "##vso[task.setvariable variable=web-app-name]${{ variables['web-app-name-prod'] }}"
          echo '[run-time] image tag: $(image-tag)'
          echo '[run-time] storage account: $(storage-container)'
          echo '[run-time] web app name: $(web-app-name)'
        displayName: 'Use prod values?'
        condition: ${{ variables['is-release'] }}

      # # sanity check
      # - script: |
      #     echo '[run-time] image tag: $(image-tag)'
      #     echo '[run-time] storage account: $(storage-container)'
      #     echo '[run-time] web app name: $(web-app-name)'
      #   displayName: 'Debug: run-time values'

      # 2) COMPILE SASS
      - script: |
          npm install
          npm run compile-sass
        displayName: 'Compile Sass to CSS'

      # 3) BUILD AND PUSH DOCKER IMAGE
      - template: steps/docker-build-push.yml@templates
        parameters:
          registryConnectionName: $(registry-service-connection)
          imageName: $(image-name)
          tagsAsMultilineString: |
            $(image-tag)

      # 4) LOCK CONTAINER IMAGE (PROD)
      - template: steps/lock-acr-image.yml@templates
        parameters:
          condition: ${{ variables['is-release'] }}
          azureArmConnection: $(lib-var-az-acr-connection)
          acrRegistryName: $(registry-acr-name)
          imageName: $(image-name)
          imageTag: $(image-tag)

      # 5) UPLOAD ASSETS TO BLOB STORAGE
      - task: AzureCLI@2
        displayName: az storage blob upload-batch
        inputs:
          azureSubscription: $(lib-var-arm-connection)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az --version
            az storage blob upload-batch \
              --account-name $(storage-account-name) \
              --source ./assets \
              --destination $(storage-container)

      # 6) DEPLOY TO APP SERVICES
      - task: AzureWebAppContainer@1
        displayName: "App Service: deploy container"
        inputs:
          appName:  $(web-app-name)
          azureSubscription: $(lib-var-arm-connection)
          imageName: $(image-name-with-registry):$(image-tag)